<?php

include_once('includes/tvdb_api.class.inc');

/**
 * Implements hook_menu
 */
function whichep_menu() {
  $items['episode-results'] = array(
    'title' => t('Episode results'),
    'page callback' => 'whichep_search_result',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['whichep/autocomplete'] = array(
    'title' => t('Whichep autocomplete'),
    'page callback' => 'whichep_autocomplete',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_block_info()
 */
function whichep_block_info() {
  $blocks = array();
  $blocks['whichep'] = array(
    'info' => t('Which Episode?'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

function whichep_block_view($delta = 'whichep') {
  $block['subject'] = NULL;
  $block['content'] = drupal_get_form('whichep_search_form');
  return $block;
}

function whichep_search_form($form_state) {
  $form = array();
  $form['whichep_search'] = array(
    '#type' => 'fieldset',
    '#title' => t(''),
    '#collapsed' => FALSE,
    '#collapsible' => FALSE,
  );

  $form['whichep_search']['tvseries'] =  array(
    '#type' => 'textfield',
    '#title' => t(''),
    '#description' => t(''),
    '#maxlength' => 120,
    '#required' => TRUE,
    '#size' => 120,
    '#default_value' => '',
    '#autocomplete_path' => 'whichep/autocomplete',
    '#attached' => array('js' => array(drupal_get_path('module', 'whichep') . '/js/autocomplete.js')),
  );

  $form['whichep_search']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Get an ep'),
  );

  return $form;
}

/**
 * Submit function, where the magic happens
 */
function whichep_search_form_submit($form, $form_state) {
  if (check_plain($form_state['values']['tvseries']) != '') {
    //whichep_search_result(check_plain($form_state['values']['tvseries']));
    $form_state['redirect'] = 'episode-results/' . check_plain($form_state['values']['tvseries']);
    drupal_redirect_form($form_state);
  }
  else {
    drupal_set_message(t("We can't find an episode for your series :( Try search again?"), 'warning');
    drupal_goto('');
  }
}

function whichep_theme() {
  return array(
    'whichep_theme_results' => array(
      'render element' => 'element',
    ),
  );
}

/**
 */
function whichep_search_result($series = NULL) {
  if (isset($series)) {
    $tvdbapi = new tvdbApi('http://www.thetvdb.com', '');
    $query = drupal_encode_path($series);
    $seriesid = $tvdbapi->getSeriesId($query);
  }
  else {
    drupal_set_message(t("Enter a valid series to search"), 'warning');
    drupal_goto('');
  }
  if (isset($seriesid)) {
    whichep_log_query($series);
    $episodes = $tvdbapi->getEpList($seriesid);
  }
  else {
    drupal_set_message(t("We can't find an episode for your series :( Try search again?"), 'warning');
    drupal_goto('');
  }
  if (isset($episodes) && is_array($episodes)) {
    $random_ep = $episodes[mt_rand(0, count($episodes) - 1)];
    $season = $random_ep->getElementsByTagName('Combined_season')->item(0)->nodeValue;
    $ep_num = $random_ep->getElementsByTagName('EpisodeNumber')->item(0)->nodeValue;
    $ep_title = $random_ep->getElementsByTagName('EpisodeName')->item(0)->nodeValue;
    $ep_overview = $random_ep->getElementsByTagName('Overview')->item(0)->nodeValue;

    $content[] = t("We've found your TV Series!");
    $content['results'] = t("Why not watch: ") . 'Season ' . $season . ' Episode ' . $ep_num . ' ' . $ep_title;
    if (!empty($ep_overview)) {
      $content['overview'] = $ep_overview;
    }
    $content['#theme_wrappers'] = array('whichep_theme_results');

    return $content;
  }
  else {
    drupal_set_message(t("We can't find an episode for your series :( Try search again?"), 'warning');
    drupal_goto('');
  }
}

/**
 * Writes or updates a series to the whichep_search_terms table.
 * @param $series - the cleaned series query.
 */
function whichep_log_query($series) {
  $sql = 'SELECT count FROM {whichep_search_terms} WHERE search_term = :term';
  $count = db_query($sql, array(':term' => $series))->fetchField();
  // If the query has already been logged, update the count and time
  if (!empty($count)) {
    $count++;
    db_update('whichep_search_terms')
      ->fields(array(
        'count' => $count,
        'timestamp' => time(),
      ))
      ->condition('search_term', $series, '=')
      ->execute();
  }
  // Otherwise, write a new record for the term
  else {
    db_insert('whichep_search_terms')
      ->fields(array(
        'search_term' => $series,
        'timestamp' => time(),
        'count' => 1,
      ))
      ->execute();
  }
}

function theme_whichep_theme_results($variables) {
  $element = $variables['element'];
  $output = '';
  foreach (element_children($element) as $count) {
    if ($count === 'overview') {
      $output .= '<p><em>' . $element[$count] . '</em></p>';
    }
    else {
      $output .= '<p>' . $element[$count] . '</p>';
    }
  }
  return $output;
}

/**
 * Menu callback for whichep/autocomplete
 * @param $query - the partial query for matching
 * @return A maximum of 10 suggestions
 */
function whichep_autocomplete($query) {
  $matches = array();

  $sql = "SELECT search_term FROM {whichep_search_terms} WHERE LOWER(search_term)
    LIKE LOWER(:query) ORDER BY count DESC";

  $results = db_query_range($sql, 0, 10, array(':query' => db_like($query) . '%'))->fetchAssoc();

  if ($results) {
    foreach ($results as $result) {
      $result = check_plain($result);
      $matches[$result] = $result;
    }

    return drupal_json_output($matches);
  }
  else {
    return;
  }
}

